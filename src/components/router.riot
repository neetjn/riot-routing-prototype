<router>
  <h1 class="text-bold text-3xl">
    Route: { state.route ? state.route.component.name : 'NaN' }
  </h1>
  <slot if={state.route} is={state.route.component.name}></slot>

  <script>
    import { register } from 'riot'
    import Router from 'core-routing/dist/router.dev.js'

    export default {
      state: {
        routes: [],
        route: undefined,
      },
      onBeforeMount() {
        this.state.routes.push(...this.props.routes.map(route => {
          // riot.js loader creates a semantic component
          // component can be defined using riot.component(*)
          // or component can be registered using riot.register(name, component)
          // registering to use html element as component
          // source: https://riot.js.org/documentation/#html-elements-as-components 
          register(route.component.name, route.component)
          return Object.assign(route, {
            active: false,
            path: Array.isArray(route.path) ? route.path : [route.path] 
          })
        }))
      },
      onMounted() {
        const self = this
        
        const router = new Router({
          client: {
            onNavigate(e) {
              const route = self.state.routes.find(r => {
                return r.path.find(path => {
                  return e.$tools.match(e.location.path, path)
                })
              })
              if (self.state.route) {
                self.state.route.active = false
              }
              if (route) {
                route.active = true
                self.state.route = route
              }
              self.update()
            },
          }
        })

        router.start()
      }
    }
  </script>
</router>
