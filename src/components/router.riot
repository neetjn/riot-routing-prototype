<router>
  <h1 class="text-bold text-3xl">
    Route: { state.route ? state.route.component.name : '_' }
  </h1>
  <div id="router-context">
    <div />
  </div>
  <script>
    import { component } from 'riot'
    import Router from 'core-routing/dist/router.dev.js'
    export default {
      state: {
        route: null,
        mounted: null
      },
      onBeforeMount() {
        this.props.routes.forEach(route => {
          route.component = component(route.component)
          if (!Array.isArray(route.path)) {
            route.path = [route.path]
          }
        })
      },
      onMounted() {
        const self = this
        this.router = new Router({
          client: {
            onNavigate(e) {
              const route = self.props.routes.find(r => {
                return r.path.find(path => {
                  return e.$tools.match(e.location.path, path)
                })
              })
              // TODO: left here, figure out how to not destroy parent on unmount
              if (route) {
                const ctx = self.$('#router-context')
                if (self.state.mounted) {
                  self.state.mounted.unmount()
                }
                self.state.route = route
                self.state.mounted = self.state.route.component(ctx)
                // self.update()
              }
            },
          }
        })
        this.router.start()
      }
    }
  </script>
</router>
