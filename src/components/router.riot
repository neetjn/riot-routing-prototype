<router>
  <h1 class="text-bold text-3xl">
    Route: { state.route ? state.route.component.name : 'NaN' }
  </h1>
  <slot if={state.route} is={state.route.component.name}></slot>

  <script>
    import { register } from 'riot'
    import Router from 'core-routing/dist/router.dev.js'

    export default {
      state: {
        routes: [],
        route: undefined,
      },
      onBeforeMount() {
        this.state.routes.push(...this.props.routes.map(route => {
          // riot.js loader creates a semantic component
          // component can be defined using riot.component(*)
          // or component can be registered using riot.register(name, component)
          // registering to use html element as component
          // source: https://riot.js.org/documentation/#html-elements-as-components
          register(route.component.name, route.component)
          return Object.assign(route, {
            active: false,
            path: Array.isArray(route.path) ? route.path : [route.path]
          })
        }))
      },
      onMounted() {
        const self = this

        const findRoute = (e) => {
          return this.state.routes.find(r => {
            return r.path.find(path => {
              return e.$tools.match(e.location.path, path)
            })
          })
        }

        const handleRoute = (e, route = null) => {
          route = route || findRoute(e)
          if (self.state.route) {
            this.state.route.active = false
          }
          if (route) {
            route.active = true
            this.state.route = route
          }
          this.update()
        }

        const startRouter = (e) => {
          // TODO: add handler for no route
          console.log('made it here? 1')
          if (this.props.default) {
            console.log('made it here? 2')
            const baseRoute = findRoute(e)
            console.log(baseRoute)
            if (!baseRoute) {
              console.log('made it here? 3')
              // trigger navigate, will take care of the rest
              window.location.hash = `#!${this.props.default}`
            } else {
              handleRoute(e, baseRoute)
            }
          }
        }

        const router = new Router({
          client: {
            onStart: startRouter,
            onNavigate: handleRoute,
          }
        })

        router.start()
      }
    }
  </script>
</router>
