<router>
  <slot if={route}
        is={route.source.component.name}
        data={route}></slot>

  <script>
    import { register } from 'riot'
    import Router from 'core-routing/dist/router.dev.js'

    export default {
      routes: [],
      state: {
        // route state as linked list
        // if no route matched, store as nil
        route: [],
      },
      get route() {
        return this.state.route.length ? this.state.route.slice(-1)[0] : null;
      },
      onBeforeMount() {
        this.routes.push(...this.props.routes.map(route => {
          // riot.js loader creates a semantic component
          // component can be defined using riot.component(*)
          // or component can be registered using riot.register(name, component)
          // registering to use html element as component
          // source: https://riot.js.org/documentation/#html-elements-as-components
          register(route.component.name, route.component)
          // store routes as immutable objects
          return Object.freeze(
            Object.assign(route, {
              path: Array.isArray(route.path) ? route.path : [route.path]
            })
          )
        }))
      },
      onMounted() {
        const self = this

        const navigatePath = (path) => {
          // set hash to default
          // will trigger navigation event and handle route
          window.location.hash = `#!${path}`
        }

        const matchRoute = (e) => {
          return this.routes.find(r => {
            return r.path.find(path => {
              return e.$tools.match(e.location.path, path)
            })
          })
        }

        const RouteState = (e, route) => {
          // for arg/qarg extraction assume --
          // route only has one path
          const result = e.$tools.process(e.location.path, route.path[0])
          return {
            source: route,
            args: result.variables,
            qargs: result.args
          }
        }

        const handleRoute = (e) => {
          const route = matchRoute(e)
          if (route) {
            this.state.route.push(RouteState(e, route))
            this.update()
          } else {
            this.state.route.push(null)
            if (this.props.fallback) {
              navigatePath(this.props.fallback)
            }
          }
        }

        const startRouter = (e) => {
          if (this.props.default && !e.location.hash) {
            navigatePath(this.props.default)
          } else {
            handleRoute(e)
          }
        }

        const router = new Router({
          client: {
            onStart: startRouter,
            onNavigate: handleRoute,
          }
        })

        router.start()
      }
    }
  </script>
</router>
