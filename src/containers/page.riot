<page>
  <example-header routes={ routes } />
  <h1 class="text-center mt-4 mb-4">
    <i class="entypo entypo-alert" /> Root
  </h1>
  <h1 class="text-center mt-4 mb-4" if={ state.route }>
    Current Route: { state.route }
  </h1>
  <br />
  <!-- fallback only works, if no route has a wildcard
       otherwise match will resole the wildcard route
       and it will render without redirecting -->
  <!--
    props:
      default: optional path to route to if no hash detected
      fallback: optional path to route to if no route is matched
      routes: list of route specifications for router
      stateChanged: optional callback called when router state updated
  -->
  <router default="/"
          fallback="/not-found"
          routes={ routes }
          stateChanged={ stateChanged }></router>
  <script>
    import Router from '../components/router.riot'

    import ExampleHeader from '../components/example-header.riot'

    import Home from '../views/home.riot'
    import Random from '../views/random.riot'
    import NotFound from '../views/not-found.riot'

    const routes = [
      {
        name: 'Home',
        component: Home,
        path: ['/', '/home']
      },
      {
        name: 'User Random',
        component: Random,
        path: '/user/:id/random',
        condition: (data, transition) => {
          const userId = parseInt(data.args.id)
          if (userId && userId >= 0) {
            transition()
          } else {
            transition('/not-found')
          }
        },
      },
      {
        name: 'Not Found',
        component: NotFound,
        path: '/not-found'
      }
    ]

    export default {
      components: {
        Router,
        ExampleHeader,
      },
      routes,
      stateChanged(route) {
        // set global router state
        this.router.route = route.source
        // update each linked component
        this.router.components.forEach(component => component.update())
      }
    }
  </script>
</page>
