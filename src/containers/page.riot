<page>
  <h1 class="text-center mt-4 mb-4">
    <i class="entypo entypo-alert" /> Root
  </h1>
  <h1 class="text-center mt-4 mb-4" if={ state.route }>
    Current Route: { state.route }
  </h1>
  <!-- fallback only works, if no route has a wildcard
       otherwise match will resole the wildcard route
       and it will render without redirecting -->
  <!--
    props:
      default: path to route to if no hash detected
      fallback: path to route to if no route is matched
  -->
  <router default="/"
          fallback="/not-found"
          routes={ routes }
          stateChanged={ stateChanged }></router>
  <script>
    import Router from '../components/router.riot'
    import Link from '../components/link.riot'

    import Home from '../views/home.riot'
    import Random from '../views/random.riot'
    import NotFound from '../views/not-found.riot'

    const routes = [
      {
        component: Home,
        path: ['/', '/home']
      },
      {
        component: Random,
        path: '/user/:id/random',
        condition: (data) => {
          const userId = parseInt(data.args.id)
          if (userId && userId >= 0) {
            return true
          } else {
            return '/'
          }
        },
      },
      {
        component: NotFound,
        path: '/not-found'
      }
    ]

    export default {
      components: {
        Router,
        Link,
      },
      routes,
      state: {
        route: ''
      },
      stateChanged(route) {
        this.state.route = route.source.component.name
        // Left here: How do I update without updating parent?
        // more logically, I would probably need to pass this along to another child component...
        //this.update()
      }
    }
  </script>
</page>
